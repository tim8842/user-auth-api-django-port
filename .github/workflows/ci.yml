name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'  # Укажите вашу версию Python

    - name: Install dependencies
      run: |
        python -m venv venv
        . venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set environment variables from GitHub Secrets
      run: |
        echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
        echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
        echo "EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}" >> .env
        echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
        echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
        echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "DSN=${{ secrets.DSN }}" >> .env

    - name: Run tests
      run: |
        . venv/bin/activate
        python manage.py test

  build_and_push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set environment variables from GitHub Secrets
      run: |
        echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
        echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
        echo "EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}" >> .env
        echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
        echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
        echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "DSN=${{ secrets.DSN }}" >> .env

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Build Docker Compose images
      run: |
        docker-compose -f docker-compose.yml build

    - name: Tag Docker images for Yandex Cloud
      run: |
        docker tag nu-web:latest cr.yandex/${{ secrets.YC_CR_ID }}/web-image:${{ github.sha }}
        docker tag nu-nginx-web:latest cr.yandex/${{ secrets.YC_CR_ID }}/nginx-image:${{ github.sha }}
        docker tag nu-nginx-beat-worker:latest cr.yandex/${{ secrets.YC_CR_ID }}/nu-nginx-beat-worker:${{ github.sha }}
        docker tag nu-nginx-celery-worker:latest cr.yandex/${{ secrets.YC_CR_ID }}/nu-nginx-celery-worker:${{ github.sha }}

    - name: Install Yandex CLI
      run: |
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
      
    - name: Console output
      run: |

        ls /home/runner/yandex-cloud/bin
        chmod +x /home/runner/yandex-cloud/bin/yc
        /home/runner/yandex-cloud/bin/yc --help
      
    - name: Configure Yandex Cloud CLI
      run: |
          /home/runner/yandex-cloud/bin/yc config set token ${{ secrets.YC_OAUTH_TOKEN }}
          /home/runner/yandex-cloud/bin/yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          /home/runner/yandex-cloud/bin/yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

    # - name: Run Yandex CLI command
    #   run: |
    #       /home/runner/yandex-cloud/bin/yc compute instance list

    - name: Config Docker with Yandex Cloud Container Registry
      run: |
        /home/runner/yandex-cloud/bin/yc container registry configure-docker

    - name: Login to Yandex Container Registry
      run: echo ${{ secrets.YC_OAUTH_TOKEN }} | docker login -u oauth --password-stdin cr.yandex/${{ secrets.YC_CR_ID }}
    

    - name: Push Docker images to Yandex Cloud
      run: |
        docker push cr.yandex/${{ secrets.YC_CR_ID }}/web-image:${{ github.sha }}
        docker push cr.yandex/${{ secrets.YC_CR_ID }}/nginx-image:${{ github.sha }}
        docker push cr.yandex/${{ secrets.YC_CR_ID }}/nu-nginx-beat-worker:${{ github.sha }}
        docker push cr.yandex/${{ secrets.YC_CR_ID }}/nu-nginx-celery-worker:${{ github.sha }}
    
    - name: Connect to VM via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        port: 22
    
    - name: Login to Yandex Container Registry from ssh
      run: echo ${{ secrets.YC_OAUTH_TOKEN }} | sudo docker login -u oauth --password-stdin cr.yandex/${{ secrets.YC_CR_ID }}

    - name: Stop containers
      run: |
        if [ "$(sudo docker ps -q)" ]; then
          sudo docker kill $(sudo docker ps -q) &> /dev/null
        fi

    - name: Remove containers
      run: |
        if [ "$(sudo docker ps -a -q)" ]; then
          sudo docker rm $(sudo docker ps -a -q) &> /dev/null
        fi

    - name: Remove images
      run: |
        if [ "$(sudo docker images -q)" ]; then
          sudo docker rmi $(sudo docker images -q) &> /dev/null
        fi

    - name: Remove volumes
      run: |
        if [ "$(sudo docker volume ls -q)" ]; then
          sudo docker volume rm $(sudo docker volume ls -q) &> /dev/null
        fi

    - name: Remove networks
      run: |
        if [ "$(sudo docker network ls -q)" ]; then
          sudo docker network rm $(sudo docker network ls -q) &> /dev/null
        fi

    - name: Runs images
      run: |
        sudo docker network create my_network
        sudo docker volume create static_data
        sudo docker run -d --name redis -p 6379:6379 redis:alpine
        sudo docker run -d --name worker --mount source=static_data,target=/app/staticfiles --env-file .env cr.yandex/${{ secrets.YC_CR_ID }}/nu-nginx-celery-worker:${{ github.sha }} celery -A user_auth worker --loglevel=info
        sudo docker run -d --name beat --mount source=static_data,target=/app/staticfiles --env-file .env cr.yandex/${{ secrets.YC_CR_ID }}/nu-nginx-beat-worker:${{ github.sha }} -A user_auth beat --loglevel=info
        sudo docker run -d --name web --mount source=static_data,target=/app/staticfiles -p 8000:8000 --env-file .env docker push cr.yandex/${{ secrets.YC_CR_ID }}/web-image:${{ github.sha }} sh -c "python manage.py collectstatic --noinput && gunicorn --workers=3 user_auth.wsgi:application --bind 0.0.0.0:8000"
        sudo docker run -d --name nginx --mount source=static_data,target=/app/staticfiles -p 80:80 cr.yandex/${{ secrets.YC_CR_ID }}/nu-nginx-celery-worker:${{ github.sha }}