name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'  # Укажите вашу версию Python

    - name: Install dependencies
      run: |
        python -m venv venv
        . venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set environment variables from GitHub Secrets
      run: |
        echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
        echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
        echo "EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}" >> .env
        echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
        echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
        echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "DSN=${{ secrets.DSN }}" >> .env

    - name: Run tests
      run: |
        . venv/bin/activate
        python manage.py test

  build_and_push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set environment variables from GitHub Secrets
      run: |
        echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
        echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
        echo "EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}" >> .env
        echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
        echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
        echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "DSN=${{ secrets.DSN }}" >> .env

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Build Docker Compose images
      run: |
        docker-compose -f docker-compose.yml build

    - name: Tag Docker images for Yandex Cloud
      run: |
        COMMIT_SHA=${{ github.sha }}
        docker tag nu-web:latest cr.yandex/${{ secrets.YC_CR_ID }}/web-image:${COMMIT_SHA}
        docker tag nu-nginx-web:latest cr.yandex/${{ secrets.YC_CR_ID }}/nginx-image:${COMMIT_SHA}
        docker tag nu-nginx-beat-worker:latest cr.yandex/${{ secrets.YC_CR_ID }}/nu-nginx-beat-worker:${COMMIT_SHA}
        docker tag nu-nginx-celery-worker:latest cr.yandex/${{ secrets.YC_CR_ID }}/nu-nginx-celery-worker:${COMMIT_SHA}

    - name: Install Yandex CLI
      run: |
        curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
        yc init --token ${{ secrets.YC_OAUTH_TOKEN }} --cloud-id ${{ secrets.YC_CLOUD_ID }} --folder-id ${{ secrets.YC_FOLDER_ID }}

    - name: Authenticate Docker with Yandex Cloud Container Registry
      run: |
        yc container registry configure-docker
    
    - name: Push Docker images to Yandex Cloud
      run: |
        docker cr.yandex/${{ secrets.YC_CR_ID }}/web-image:${COMMIT_SHA}
        docker cr.yandex/${{ secrets.YC_CR_ID }}/nginx-image:${COMMIT_SHA}
        docker cr.yandex/${{ secrets.YC_CR_ID }}/nu-nginx-beat-worker:${COMMIT_SHA}
        docker cr.yandex/${{ secrets.YC_CR_ID }}/nu-nginx-celery-worker:${COMMIT_SHA}
    